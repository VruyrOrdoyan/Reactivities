{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commanStore.ts","app/stores/modaleStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceHolder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modal/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmeEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modelStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","resposeBody","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","curreent","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","image","displayName","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","submiting","pagingParams","prdicate","set","setPagingParams","setPrediate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUserName","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendyFollowing","attendy","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","stopRefreshTokenTimer","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","jwToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","contant","profileStore","commentStore","comments","hubConnection","cretateHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","Button","positive","content","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Header","Description","str","length","substring","truncate","bio","extra","Icon","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","zIndex","top","ribbon","padding","verticalAlign","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropZone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","pains","menuPosition","Statistic","PrivateRout","Component","component","rest","useQuert","useLocation","search","RegisterSuccess","success","ConfirmEmail","Status","setStatus","handleConfirmEmail","getBody","location","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.81ae5e1b.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n    constructor(pageNumber = 1, pageSize = 2){\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { PaginatedResult } from '../models/pagination';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n};\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token\r\n    if(token){\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if(pagination){\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config, headers} = error.response!;\r\n    switch(status){\r\n        case 400:\r\n            if(typeof data === 'string'){\r\n                toast.error(data);\r\n            }\r\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')){\r\n                history.push('/not-found');\r\n            }\r\n            if(data.errors){\r\n                const modelStateErrors = [];\r\n                for(const key in data.errors){\r\n                    if(data.errors[key]){\r\n                        modelStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modelStateErrors.flat();\r\n            }\r\n            \r\n            break;\r\n        case 401:\r\n            if(headers['www-authenticate'] && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"')){\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again')    \r\n            }\r\n            else{\r\n                toast.error('unauthorised');\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst resposeBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst request = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(resposeBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(resposeBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(resposeBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(resposeBody)\r\n};\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(resposeBody),\r\n    details: (id: string) => request.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => request.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => request.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string ) => request.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => request.post<void>(`/activities/${id}/attend`, {})\r\n};\r\n\r\nconst Account = {\r\n    curreent: () => request.get<User>('/account'),\r\n    login: (user: UserFormValues) => request.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => request.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => request.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => request.post<User>('/account/refreshToken', {}),\r\n    verifyEmail: (token: string, email: string) => request.post<void>(`/account/verifyEmail?token=${token}&email=${email}`, {}),\r\n    resendEmailConfirm: (email: string) => request.get(`/account/resendEmailConfirmationString?email=${email}`) \r\n};\r\n\r\nconst Profiles = {\r\n    get: (username: string) => request.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => request.post(`/photos/${id}/setmain`, {}),\r\n    deletePhoto: (id: string) => request.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => request.put('/profiles', profile),\r\n    updateFollowing: (username: string) => request.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => \r\n        request.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => \r\n        request.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n};\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n};\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string\r\n    title: string\r\n    date: Date | null\r\n    description: string\r\n    category: string\r\n    city: string\r\n    venue: string;\r\n    hostUserName: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n  }\r\n\r\n  export class Activity implements Activity\r\n  {\r\n    constructor(init?: ActivityFormValues){\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues){\r\n      if(activity){\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.city = activity.city;\r\n        this.venue = activity.venue;\r\n      }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.image = user.image;\r\n        this.displayName = user.displayName;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string,\r\n    url: string,\r\n    isMain: boolean\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string,\r\n    category: string;\r\n    date: Date;\r\n}\r\n","import { makeAutoObservable, runInAction, reaction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport {format} from 'date-fns';\r\nimport { store } from './store';\r\nimport { Profile } from '../models/profile';\r\nimport { Pagination, PagingParams } from '../models/pagination';\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode: boolean = false;\r\n    loading: boolean = false;\r\n    loadingInitial: boolean = false;\r\n    submiting: boolean = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    prdicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(() => this.prdicate.keys(), () => {\r\n            this.pagingParams = new PagingParams();\r\n            this.activityRegistry.clear();\r\n            this.loadActivities();\r\n        });\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPrediate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.prdicate.forEach((value, key) => {\r\n                if(key !== 'startDate') this.prdicate.delete(key);\r\n            });\r\n        };\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.prdicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.prdicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.prdicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.prdicate.delete('startDate');\r\n                this.prdicate.set('startDate', value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.prdicate.forEach((value, key) => {\r\n            if(key === 'startDate'){\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        });\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                //const date = activity.date!.toISOString().split('T')[0];\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[kay: string]: Activity[]})\r\n        );\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try{\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        }\r\n        catch(Error){\r\n            console.log(Error);\r\n        }\r\n        finally{\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if(activity){\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else{\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                });\r\n                \r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n            finally{\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if(user){\r\n            activity.isGoing = activity.attendees?.some(\r\n                a => a.username === user.username);\r\n            activity.isHost = activity.hostUserName === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUserName);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    } \r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUserName = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(\r\n                () => {\r\n                    this.selectedActivity = newActivity;\r\n                }\r\n            );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        \r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if(activity.id){\r\n                    let updateActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updateActivity as Activity);\r\n                    this.selectedActivity = updateActivity as Activity;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if(this.selectedActivity?.isGoing){\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendyFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendy => {\r\n                if(attendy.username === username){\r\n                    attendy.following ? attendy.followersCount-- : attendy.followersCount++\r\n                    attendy.following = !attendy.following;\r\n                }\r\n            });\r\n        });\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(() => this.activeTab, activeTab => {\r\n            if(activeTab === 3 || activeTab === 4){\r\n                const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                this.loadFollowings(predicate);\r\n            } else {\r\n                this.followings = [];\r\n            }\r\n        });\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if(store.userStore.user && this.profile){\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => this.profile = profile);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if(this.profile){\r\n                    this.profile.photos?.push(photo);\r\n                    if(photo.isMain && store.userStore.user){\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => {\r\n                this.uploading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if(this.profile && this.profile.photos){\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if(this.profile){\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if(profile?.displayName \r\n                    && profile?.displayName !== store.userStore.user?.displayName){\r\n                        store.userStore.setDisplayName(profile.displayName);\r\n                    }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendyFollowing(username);\r\n            runInAction(() => {\r\n                if(this.profile \r\n                    && this.profile.username !== store.userStore.user?.username\r\n                    && this.profile.username === username){\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.username){\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if(profile.username === username){\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        this.stopRefreshTokenTimer();\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.curreent();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            await agent.Account.register(creds);\r\n            history.push(`/account/registerSuccess?email=${creds.email}`);\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if(this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if(this.user) {\r\n            this.user.displayName = name;\r\n        }\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if(response.status === 'connected'){\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                });\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => {\r\n                    this.fbLoading = false;\r\n                });\r\n            });\r\n        };\r\n        if(this.fbAccessToken){\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'});\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from \"./commanStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport ModalStore from \"./modaleStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n} \r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport const useStore = () => useContext(StoreContext);","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token){\r\n                    window.localStorage.setItem('jwt', token);\r\n                }\r\n                else{\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n            );\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    };\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (contant: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = contant;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    cretateHubConnection = (activityId: string) => {\r\n        if(store.activityStore.selectedActivity){\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(`${process.env.REACT_APP_CHAT_URL}?activityId=${activityId}`, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n            this.hubConnection.start().catch(\r\n                error => console.log('Error establishing the connection: ', error)\r\n            );\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(`${comment.createdAt}Z`);\r\n                    });\r\n                    this.comments = comments;\r\n                });\r\n            });\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stoping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { useStore } from '../stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\n\r\nconst NavBar = () => {\r\n    const {userStore: {user, logout, isLoggedIn}} = useStore();\r\n    return <Menu inverted fixed='top'>\r\n        <Container>\r\n            <Menu.Item as={NavLink} exact to='/' header>\r\n                <img src='/assets/logo.png' alt='logo' style={{marginRight: '10px'}} />\r\n                Reactivities\r\n            </Menu.Item>\r\n            {isLoggedIn && \r\n            <>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button \r\n                    as={NavLink}\r\n                    to='/createActivity' \r\n                    positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </>\r\n            }\r\n        </Container>\r\n    </Menu>\r\n};\r\n\r\nexport default observer(NavBar);","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n};\r\n\r\nconst FollowButton = ({profile}: Props) => {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if(userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'No following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'} \r\n                    content={profile.following ? 'Unfollow' : 'Follow'} \r\n                    loading={loading}\r\n                    onClick={e => handleFollow(e, profile.username)}/>\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    );\r\n};\r\n\r\nexport default observer(FollowButton);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nconst ProfileCard = ({profile}: Props) => {\r\n    const truncate = (str: string | undefined) => {\r\n        if(str){\r\n            return str.length > 40 ? `${str.substring(0, 37)}...` : str;\r\n        }\r\n    };\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileCard);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\n\r\nconst ActivityListItemAttendee = ({attendees}: Props) => {\r\n    const style = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    };\r\n    return (<List horizontal>\r\n        {attendees.map(attendee => (\r\n            <Popup\r\n                hoverable key={attendee.username}\r\n                trigger={\r\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                        <Image \r\n                            size='mini' \r\n                            circular src={attendee.image || '/assets/user.png'}\r\n                            bordered\r\n                            style={attendee.following ? style : null} />\r\n                    </List.Item>\r\n                }>\r\n                <Popup.Content>\r\n                    <ProfileCard profile={attendee} />\r\n                </Popup.Content>\r\n            </Popup>\r\n            \r\n        ))}\r\n    </List>);\r\n};\r\n\r\nexport default observer(ActivityListItemAttendee);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nconst ActivityListItem = ({activity}: Props) => {\r\n\r\n    \r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {\r\n                    activity.isCancelled && \r\n                    <Label attached='top' color='red' content='Canceled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' style={{marginBottom: 3}} circular src={activity.host?.image || 'assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted By <Link to={`/profiles/${activity.hostUserName}`}>{activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' />{format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' />{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default ActivityListItem;","import React, { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {observer} from 'mobx-react-lite';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\n\r\nconst ActivityList = () => {\r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => \r\n            <Fragment key={group}>\r\n                <Header sub color='teal'>\r\n                    {group}\r\n                </Header>\r\n                {\r\n                    activities.map(activity => (\r\n                        <ActivityListItem activity={activity} key={activity.id} />\r\n                    ))\r\n                }\r\n            </Fragment>)}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityList);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst ActivityFilters = () => {\r\n    const {activityStore: {prdicate, setPrediate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active={prdicate.has('all')}\r\n                    onClick={() => setPrediate('all', 'true')}\r\n                    />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={prdicate.has('isGoing')}\r\n                    onClick={() => setPrediate('isGoing', 'true')}\r\n                    />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={prdicate.has('isHost')}\r\n                    onClick={() => setPrediate('isHost', 'true')}\r\n                    />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={date => setPrediate('startDate', date as Date)}\r\n                value={prdicate.get('startDate') || new Date()}\r\n                />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityFilters);","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityList from './ActivityList';\r\nimport {observer} from 'mobx-react-lite';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceHolder';\r\n\r\nconst ActivityDashboard = () => {\r\n    const {activityStore} = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(activityRegistry.size <= 1){\r\n            loadActivities();\r\n        }\r\n    }, [activityStore, loadActivities, activityRegistry.size]);\r\n\r\n    \r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder/>\r\n                        <ActivityListItemPlaceholder/>\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination?.currentPage < pagination?.totalPages}\r\n                        initialLoad={false}>\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDashboard);","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n};\r\n\r\nconst MyTextInput = (props: Props) => {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyTextInput;","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst LoginForm = () => {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: error.response.data}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error'\r\n                        render={() => <Label style={{marginBottom: '10px'}} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button positive content='Login' type='submit' fluid loading={isSubmitting} />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default observer(LoginForm);","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any\r\n};\r\n\r\nconst ValidationErrors = ({errors}: Props) => {\r\n\r\n    return (\r\n        <Message error>\r\n            <Message.List>\r\n                {errors && (\r\n                    errors.map((err: any, i: any) => {\r\n                        return <Message.Item key={i}>{err}</Message.Item>\r\n                    })\r\n                )\r\n                }\r\n            </Message.List>\r\n        </Message>\r\n    );\r\n};\r\n\r\nexport default ValidationErrors;","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nconst RegisterForm = () => {\r\n    const {userStore} = useStore();\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required('The display name is required'),\r\n        username: Yup.string().required('The user name is required'),\r\n        email: Yup.string().required().email(),\r\n        password: Yup.string().required('Date is required')\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='User Name' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error'\r\n                        render={() => \r\n                            <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        positive content='Register' type='submit' fluid loading={isSubmitting} />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default observer(RegisterForm);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport {Container, Header, Segment, Image, Button, Divider} from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nconst HomePage = () => {\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead' >\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='Loago' style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {\r\n                    userStore.isLoggedIn ? (\r\n                        <>\r\n                            <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                            <Button as={Link} to='/activities' size='huge' inverted>\r\n                                Go to activities!\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login!\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register!\r\n                            </Button>\r\n                            <Divider horizontal inverted>Or</Divider>\r\n                            <Button \r\n                                loading={userStore.fbLoading}\r\n                                color='facebook' \r\n                                onClick={userStore.facebookLogin}\r\n                                size='huge' \r\n                                inverted\r\n                                content='Login with Facebook' />\r\n                        </>\r\n                    )\r\n                }\r\n                \r\n                \r\n            </Container>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(HomePage);","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nconst LoadingComponent = ({inverted = true, content = 'Loading...'}: Props) => {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    );\r\n};\r\n\r\nexport default LoadingComponent;","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n};\r\n\r\nconst MyTextArea = (props: Props) => {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyTextArea;","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n};\r\n\r\nconst MySelectInput = (props: Props) => {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MySelectInput;","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n];","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\nconst MyDateInput = (props: Partial<ReactDatePickerProps>) => {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyDateInput;","import React, { useEffect, useState } from 'react';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {observer} from 'mobx-react-lite';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { v4 as uuid  } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nconst ActivityForm = () => {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {createActivity, updateActivity, loadActivity, loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The description title is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n    });\r\n    \r\n    useEffect(() => {\r\n        if(id){\r\n            loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n            \r\n        }\r\n    }, [id, loadActivity]);\r\n\r\n    \r\n\r\n    const handleFormSubmit = (activity: ActivityFormValues) => {        \r\n        if(!activity.id){\r\n            const newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => {history.push(`/activities/${newActivity.id}`);})\r\n        }\r\n        else{\r\n            updateActivity(activity).then(() => {history.push(`/activities/${activity.id}`);});\r\n        }\r\n    };\r\n\r\n    if(loadingInitial){\r\n        return <LoadingComponent content='Load Activity...'/>\r\n    }\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header sub content='Activity Details' color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date' \r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'/>\r\n                        <Header sub content='Location Details' color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive type='submit' \r\n                            content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n            \r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityForm);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore:{updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            {activity.isCancelled && \r\n                <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \r\n                    ribbon color='red' content='Cancelled' />\r\n            }\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong>\r\n                                        <Link to={`/profiles/${activity.host?.username}`}>\r\n                                             {activity.host?.displayName}\r\n                                        </Link>\r\n                                    </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {\r\n                    activity.isHost ? (\r\n                        <>\r\n                            <Button\r\n                                color={activity.isCancelled ? 'green' : 'red'}\r\n                                floated='left'\r\n                                basic\r\n                                content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                                onClick={cancelActivityToggle}\r\n                                loading={loading} />\r\n                            <Button\r\n                                disabled={activity.isCancelled} \r\n                                color='orange' \r\n                                floated='right' \r\n                                as={Link} \r\n                                to={`/manage/${activity.id}`}>\r\n                                Manage Event\r\n                            </Button>\r\n                        </>\r\n                    ) : activity.isGoing ? (\r\n                        <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                    ) : (\r\n                        <Button \r\n                            disabled={activity.isCancelled} \r\n                            loading={loading} \r\n                            onClick={updateAttendance}\r\n                            color='teal'>\r\n                            Join Activity\r\n                        </Button>\r\n                    )\r\n                }                \r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { Field, FieldProps, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if(activityId) {\r\n            commentStore.cretateHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [activityId, commentStore]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n            <Formik\r\n                    onSubmit={(values, {resetForm}) => \r\n                    commentStore.addComment(values).then(() => resetForm())} \r\n                    initialValues={{body: ''}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                    >\r\n                        {({isSubmitting, isValid, handleSubmit}) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{position: 'relative'}}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea \r\n                                                placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if(e.key === 'Enter' && e.shiftKey){\r\n                                                        return;\r\n                                                    }\r\n                                                    if(e.key === 'Enter' && !e.shiftKey){\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                                />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {\r\n                        commentStore.comments.map(comment => (\r\n                            <Comment key={comment.id}>\r\n                                <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                                <Comment.Content>\r\n                                    <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                        {comment.displayName}\r\n                                    </Comment.Author>\r\n                                    <Comment.Metadata>\r\n                                        <div>{`${formatDistanceToNow(comment.createdAt)} ago`}</div>\r\n                                    </Comment.Metadata>\r\n                                    <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                                </Comment.Content>\r\n                            </Comment>\r\n                        ))\r\n                    }\r\n                    \r\n                    \r\n                    \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props{\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\r\n    if(!attendees){\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'}  going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendy => (\r\n                        <Item style={{ position: 'relative' }} key={attendy.username}>\r\n                            {attendy.username === host?.username &&\r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>}\r\n                            <Image size='tiny' src={attendy.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendy.username}`}>{attendy.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendy.following && \r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra> }\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import React, { useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useParams } from 'react-router-dom';\r\nimport {observer} from 'mobx-react-lite';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nconst ActivityDetails = () =>{ \r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if(id){\r\n            loadActivity(id);\r\n        }\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if(loadingInitial || !activity){\r\n      return <LoadingComponent />;  \r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n        );\r\n    };\r\n\r\nexport default observer(ActivityDetails)\r\n","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nconst NotFound = () => {\r\n\r\n    return (<Segment placeholder>\r\n        <Header icon>\r\n            <Icon name='search' />\r\n            Oops - we've looked everywhere and could not find this\r\n        </Header>\r\n        <Segment.Inline>\r\n            <Button as={Link} to='/activities' primary>\r\n                Return to activities page\r\n            </Button>\r\n        </Segment.Inline>\r\n    </Segment>);\r\n};\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ServerError = () => {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header as='h5' content={commonStore.error?.message} color='red' />\r\n            {\r\n                commonStore?.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Strak trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>\r\n                        {commonStore.error.details}\r\n                    </code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default observer(ServerError);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nconst ModalContainer = () => {\r\n    const {modalStore} = useStore()\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini' >\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default observer(ModalContainer);","import { Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../app/common/form/MyTextArea';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    setEditMode: (editMode: boolean) => void\r\n}\r\n\r\nconst ProfileEditForm = ({setEditMode}: Props) => {\r\n    const {profileStore: {updateProfile, profile}} = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: profile?.displayName,\r\n                bio: profile?.bio\r\n            }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={\r\n                Yup.object({\r\n                    displayName: Yup.string().required()\r\n                })\r\n            }>\r\n                {({isSubmitting, isValid, dirty}) => (\r\n                    <Form className='ui form'>\r\n                        <MyTextInput placeholder='Display Name' name='displayName' />\r\n                        <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                        <Button \r\n                            positive\r\n                            type='submit'\r\n                            loading={isSubmitting}\r\n                            content='Update profile'\r\n                            floated='right'\r\n                            disabled={!isValid || !dirty}\r\n                        />\r\n                    </Form>\r\n                )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileEditForm);","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileEditForm from './ProfileEditForm';\r\n\r\nconst ProfileAbout = () => {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {\r\n                        isCurrentUser && (\r\n                            <Button \r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}/>\r\n                        )\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {\r\n                        editMode ? <ProfileEditForm setEditMode={setEditMode} /> : \r\n                        <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileAbout);","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n    useEffect(() => {\r\n            loadUserActivities(profile!.username);\r\n        }, \r\n    [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                        />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                            as={Link}\r\n                            to={`/activities/${activity.id}`}\r\n                            key={activity.id}\r\n                            >\r\n                                <Image\r\n                                src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                style={{ minHeight: 100, objectFit:\r\n                                'cover' }}\r\n                                />\r\n                            <Card.Content>\r\n                                <Card.Header\r\n                                    textAlign='center'>{activity.title}\r\n                                </Card.Header>\r\n                                <Card.Meta textAlign='center'>\r\n                                    <div>\r\n                                    {\r\n                                        format(new Date(activity.date), 'do LLL')\r\n                                    }\r\n                                    </div>\r\n                                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                </Card.Meta>\r\n                            </Card.Content>\r\n                        </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n        );\r\n    });","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\n\r\n\r\nconst ProfileFollowings = () => {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings} = profileStore;\r\n\r\n\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={`People following ${profile?.displayName}`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {\r\n                            followings.map(profile => (\r\n                                <ProfileCard key={profile.username} profile={profile} />\r\n                            ))\r\n                        }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileFollowings);","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props\r\n{\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nconst PhotoWidgetCropper = ({imagePreview, setCropper}: Props) => {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PhotoWidgetCropper;","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropZone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    };\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    };\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, \r\n            {\r\n                preview: URL.createObjectURL(file)\r\n            })))\r\n    }, [setFiles]);\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : {...dzStyles}}>\r\n        <input {...getInputProps()} />\r\n        <Icon name='upload' size='huge' />\r\n        <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropZone from './PhotoWidgetDropZone';\r\n\r\ninterface Props{\r\n    uploadPhoto: (file: Blob) => void;\r\n    loading: boolean;\r\n}\r\n\r\nconst PhotoUploadWidget = ({uploadPhoto, loading}: Props) => {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrope() {\r\n        if(cropper){\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropZone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 3 - Preview and upload' />\r\n                {files && files.length > 0 && \r\n                <>\r\n                    <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrope} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PhotoUploadWidget;","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props{\r\n    profile: Profile\r\n}\r\n\r\nconst ProfilePhotos = ({profile}: Props) => {\r\n    const {profileStore: {isCurrentUser, uploadPhoto, \r\n        uploading, setMainPhoto, loading, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n    const handlePhotoUpload = (file: Blob) => {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    };\r\n    const handleSetMainPhoto = (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) => {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    };\r\n    const handleDeletePhoto = (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) => {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {\r\n                        isCurrentUser && (\r\n                            <Button floated='right' basic \r\n                                content={addPhotoMode ? 'Cancel' : 'Add Photo'} \r\n                                onClick={() => setAddPhotoMode(!addPhotoMode)}/>\r\n                        )\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                        {\r\n                            profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={`main${photo.id}`}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === `main${photo.id}` && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}/>\r\n                                            <Button\r\n                                                basic\r\n                                                name={`delete${photo.id}`}\r\n                                                icon='trash'\r\n                                                color='red'\r\n                                                loading={target === `delete${photo.id}` && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>    \r\n                            ))\r\n                        }\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePhotos);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nconst ProfileContent = ({profile}: Props) => {\r\n    const {profileStore} = useStore();\r\n\r\n    const pains = [\r\n        {\r\n            menuItem: 'About',\r\n            render: () => <ProfileAbout />\r\n        },\r\n        {\r\n            menuItem: 'Photos',\r\n            render: () => <ProfilePhotos profile={profile} />\r\n        },\r\n        {\r\n            menuItem: 'Events',\r\n            render: () => <ProfileActivities/>\r\n        },\r\n        {\r\n            menuItem: 'Followars',\r\n            render: () => <ProfileFollowings />\r\n        },\r\n        {\r\n            menuItem: 'Following',\r\n            render: () => <ProfileFollowings />\r\n        }\r\n    ];\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={pains}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default observer(ProfileContent);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nconst ProfileHeader = ({profile}: Props) => {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Follower' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileHeader);","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nconst ProfilePage = () => {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadProfile, loadingProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        };\r\n    }, [loadProfile, username, setActiveTab]);\r\n\r\n    if(loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile && \r\n                <>\r\n                <ProfileHeader profile={profile} />\r\n                <ProfileContent profile={profile} />\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePage);","import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nexport default function PrivateRout({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    );\r\n}","import { useLocation } from \"react-router-dom\";\r\n\r\nexport default function useQuert() {\r\n    return new URLSearchParams(useLocation().search);\r\n}","import React from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/agent';\r\nimport useQuert from '../../app/common/util/hooks';\r\n\r\nexport default function RegisterSuccess() {\r\n    const email = useQuert().get('email') as string;\r\n\r\n    function handleConfirmEmail() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check your email')\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon color='green'>\r\n                <Icon name='check' />\r\n                Successfuly registrated!\r\n            </Header>\r\n            <p>\r\n                Please check your email (icluding junk email) for the verification email\r\n            </p>\r\n            {email && \r\n                <>\r\n                    <p>\r\n                        Didn't receive an email? Click below button to resent\r\n                    </p>\r\n                    <Button \r\n                        primary\r\n                        onClick={handleConfirmEmail}\r\n                        size='huge'\r\n                        content='Resent email'\r\n                    />\r\n                </>\r\n            }\r\n        </Segment>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/agent';\r\nimport useQuert from '../../app/common/util/hooks';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from './LoginForm';\r\n\r\nexport default function ConfirmEmail() {\r\n    const {modalStore} = useStore();\r\n    const email = useQuert().get('email') as string;\r\n    const token = useQuert().get('token') as string;\r\n\r\n    const Status = {\r\n        Verifying: 'Verifying',\r\n        Failed: 'Failed',\r\n        Success: 'Success'\r\n    };\r\n\r\n    const [status, setStatus] = useState(Status.Verifying); \r\n    function handleConfirmEmail() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check your email')\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Account.verifyEmail(token, email).then(() => {\r\n            setStatus(Status.Success);\r\n        }).catch(() => {\r\n            setStatus(Status.Failed);\r\n        });\r\n    }, [Status.Failed, Status.Success, token, email]);\r\n\r\n    function getBody(){\r\n        switch (status) {\r\n            case Status.Verifying:\r\n                return <p>Verifying...</p>;\r\n            case Status.Failed:\r\n                return (\r\n                    <div>\r\n                        <p>Verification failed. You can try resending the verify link to your email</p>\r\n                        <Button primary onClick={handleConfirmEmail} size='huge' content='Resend Email' />\r\n                    </div>\r\n                );\r\n            case Status.Success:\r\n                return (\r\n                    <div>\r\n                        <p>Email has been verified - you can now login</p>\r\n                        <Button primary onClick={() => modalStore.openModal(<LoginForm />)} size='huge' content='Login' />\r\n                    </div>\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon>\r\n                <Icon name='envelope' />\r\n                Email verification\r\n            </Header>\r\n            <Segment.Inline>\r\n                {getBody()}\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n}","import React, { Fragment, useEffect } from 'react';\r\nimport './styles.css';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modal/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\r\nimport ConfirmEmail from '../../features/users/ConfirmeEmail';\r\n\r\nfunction App() {\r\n\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if(commonStore.token){\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    }\r\n    else{\r\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\r\n    }\r\n  }, [commonStore, userStore]);\r\n\r\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n  return (\r\n    <Fragment>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <>\r\n          <NavBar />\r\n          <Container style={{marginTop: '7em'}}>\r\n            <Switch>            \r\n              <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n              <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n              <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n              <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n              <PrivateRoute path='/errors' component={TestErrors} />\r\n              <Route path='/server-error' component={ServerError} />\r\n              <Route path='/account/registerSuccess' component={RegisterSuccess} />\r\n              <Route path='/account/verifyEmail' component={ConfirmEmail} />\r\n              <Route component={NotFound} />\r\n            </Switch>\r\n          </Container>\r\n          </>    \r\n        )}\r\n      />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n      <Router history={history}>\n        <ScrollToTop />\n        <App />\n      </Router>\n    </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}