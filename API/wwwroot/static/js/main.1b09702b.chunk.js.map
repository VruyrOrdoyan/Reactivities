{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commanStore.ts","app/stores/modaleStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceHolder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modal/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modelStateErrors","key","flat","setServerError","Promise","reject","resposeBody","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","curreent","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","image","displayName","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","submiting","pagingParams","prdicate","set","setPagingParams","setPrediate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUserName","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendyFollowing","attendy","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","contant","profileStore","commentStore","comments","hubConnection","cretateHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","Button","positive","content","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Header","Description","str","length","substring","truncate","bio","extra","Icon","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","zIndex","top","ribbon","padding","verticalAlign","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropZone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","pains","menuPosition","Statistic","PrivateRout","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.1b09702b.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n    constructor(pageNumber = 1, pageSize = 2){\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { PaginatedResult } from '../models/pagination';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n};\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token\r\n    if(token){\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if(pagination){\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch(status){\r\n        case 400:\r\n            if(typeof data === 'string'){\r\n                toast.error(data);\r\n            }\r\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')){\r\n                history.push('/not-found');\r\n            }\r\n            if(data.errors){\r\n                const modelStateErrors = [];\r\n                for(const key in data.errors){\r\n                    if(data.errors[key]){\r\n                        modelStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modelStateErrors.flat();\r\n            }\r\n            \r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst resposeBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst request = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(resposeBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(resposeBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(resposeBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(resposeBody)\r\n};\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(resposeBody),\r\n    details: (id: string) => request.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => request.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => request.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string ) => request.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => request.post<void>(`/activities/${id}/attend`, {})\r\n};\r\n\r\nconst Account = {\r\n    curreent: () => request.get<User>('/account'),\r\n    login: (user: UserFormValues) => request.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => request.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => request.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\r\n};\r\n\r\nconst Profiles = {\r\n    get: (username: string) => request.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => request.post(`/photos/${id}/setmain`, {}),\r\n    deletePhoto: (id: string) => request.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => request.put('/profiles', profile),\r\n    updateFollowing: (username: string) => request.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => \r\n        request.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => \r\n        request.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n};\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n};\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string\r\n    title: string\r\n    date: Date | null\r\n    description: string\r\n    category: string\r\n    city: string\r\n    venue: string;\r\n    hostUserName: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n  }\r\n\r\n  export class Activity implements Activity\r\n  {\r\n    constructor(init?: ActivityFormValues){\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues){\r\n      if(activity){\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.city = activity.city;\r\n        this.venue = activity.venue;\r\n      }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.image = user.image;\r\n        this.displayName = user.displayName;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string,\r\n    url: string,\r\n    isMain: boolean\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string,\r\n    category: string;\r\n    date: Date;\r\n}\r\n","import { makeAutoObservable, runInAction, reaction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport {format} from 'date-fns';\r\nimport { store } from './store';\r\nimport { Profile } from '../models/profile';\r\nimport { Pagination, PagingParams } from '../models/pagination';\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode: boolean = false;\r\n    loading: boolean = false;\r\n    loadingInitial: boolean = false;\r\n    submiting: boolean = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    prdicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(() => this.prdicate.keys(), () => {\r\n            this.pagingParams = new PagingParams();\r\n            this.activityRegistry.clear();\r\n            this.loadActivities();\r\n        });\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPrediate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.prdicate.forEach((value, key) => {\r\n                if(key !== 'startDate') this.prdicate.delete(key);\r\n            });\r\n        };\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.prdicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.prdicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.prdicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.prdicate.delete('startDate');\r\n                this.prdicate.set('startDate', value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.prdicate.forEach((value, key) => {\r\n            if(key === 'startDate'){\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        });\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                //const date = activity.date!.toISOString().split('T')[0];\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[kay: string]: Activity[]})\r\n        );\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try{\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        }\r\n        catch(Error){\r\n            console.log(Error);\r\n        }\r\n        finally{\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if(activity){\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else{\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                });\r\n                \r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n            finally{\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if(user){\r\n            activity.isGoing = activity.attendees?.some(\r\n                a => a.username === user.username);\r\n            activity.isHost = activity.hostUserName === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUserName);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    } \r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUserName = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(\r\n                () => {\r\n                    this.selectedActivity = newActivity;\r\n                }\r\n            );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        \r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if(activity.id){\r\n                    let updateActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updateActivity as Activity);\r\n                    this.selectedActivity = updateActivity as Activity;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if(this.selectedActivity?.isGoing){\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendyFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendy => {\r\n                if(attendy.username === username){\r\n                    attendy.following ? attendy.followersCount-- : attendy.followersCount++\r\n                    attendy.following = !attendy.following;\r\n                }\r\n            });\r\n        });\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(() => this.activeTab, activeTab => {\r\n            if(activeTab === 3 || activeTab === 4){\r\n                const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                this.loadFollowings(predicate);\r\n            } else {\r\n                this.followings = [];\r\n            }\r\n        });\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if(store.userStore.user && this.profile){\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => this.profile = profile);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if(this.profile){\r\n                    this.profile.photos?.push(photo);\r\n                    if(photo.isMain && store.userStore.user){\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => {\r\n                this.uploading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if(this.profile && this.profile.photos){\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if(this.profile){\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if(profile?.displayName \r\n                    && profile?.displayName !== store.userStore.user?.displayName){\r\n                        store.userStore.setDisplayName(profile.displayName);\r\n                    }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendyFollowing(username);\r\n            runInAction(() => {\r\n                if(this.profile \r\n                    && this.profile.username !== store.userStore.user?.username\r\n                    && this.profile.username === username){\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.username){\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if(profile.username === username){\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.curreent();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if(this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if(this.user) {\r\n            this.user.displayName = name;\r\n        }\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if(response.status === 'connected'){\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                });\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => {\r\n                    this.fbLoading = false;\r\n                });\r\n            });\r\n        };\r\n        if(this.fbAccessToken){\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'});\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from \"./commanStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport ModalStore from \"./modaleStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n} \r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport const useStore = () => useContext(StoreContext);","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token){\r\n                    window.localStorage.setItem('jwt', token);\r\n                }\r\n                else{\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n            );\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    };\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (contant: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = contant;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    cretateHubConnection = (activityId: string) => {\r\n        if(store.activityStore.selectedActivity){\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(`${process.env.REACT_APP_CHAT_URL}?activityId=${activityId}`, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n            this.hubConnection.start().catch(\r\n                error => console.log('Error establishing the connection: ', error)\r\n            );\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(`${comment.createdAt}Z`);\r\n                    });\r\n                    this.comments = comments;\r\n                });\r\n            });\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stoping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { useStore } from '../stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\n\r\nconst NavBar = () => {\r\n    const {userStore: {user, logout}} = useStore();\r\n    return <Menu inverted fixed='top'>\r\n        <Container>\r\n            <Menu.Item as={NavLink} exact to='/' header>\r\n                <img src='/assets/logo.png' alt='logo' style={{marginRight: '10px'}} />\r\n                Reactivities\r\n            </Menu.Item>\r\n            <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n            <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n            <Menu.Item>\r\n                <Button \r\n                as={NavLink}\r\n                to='/createActivity' \r\n                positive content='Create Activity' />\r\n            </Menu.Item>\r\n            <Menu.Item position='right'>\r\n                <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                <Dropdown pointing='top left' text={user?.displayName}>\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                        <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </Menu.Item>\r\n        </Container>\r\n    </Menu>\r\n};\r\n\r\nexport default observer(NavBar);","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n};\r\n\r\nconst FollowButton = ({profile}: Props) => {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if(userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'No following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'} \r\n                    content={profile.following ? 'Unfollow' : 'Follow'} \r\n                    loading={loading}\r\n                    onClick={e => handleFollow(e, profile.username)}/>\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    );\r\n};\r\n\r\nexport default observer(FollowButton);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nconst ProfileCard = ({profile}: Props) => {\r\n    const truncate = (str: string | undefined) => {\r\n        if(str){\r\n            return str.length > 40 ? `${str.substring(0, 37)}...` : str;\r\n        }\r\n    };\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileCard);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\n\r\nconst ActivityListItemAttendee = ({attendees}: Props) => {\r\n    const style = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    };\r\n    return (<List horizontal>\r\n        {attendees.map(attendee => (\r\n            <Popup\r\n                hoverable key={attendee.username}\r\n                trigger={\r\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                        <Image \r\n                            size='mini' \r\n                            circular src={attendee.image || '/assets/user.png'}\r\n                            bordered\r\n                            style={attendee.following ? style : null} />\r\n                    </List.Item>\r\n                }>\r\n                <Popup.Content>\r\n                    <ProfileCard profile={attendee} />\r\n                </Popup.Content>\r\n            </Popup>\r\n            \r\n        ))}\r\n    </List>);\r\n};\r\n\r\nexport default observer(ActivityListItemAttendee);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nconst ActivityListItem = ({activity}: Props) => {\r\n\r\n    \r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {\r\n                    activity.isCancelled && \r\n                    <Label attached='top' color='red' content='Canceled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' style={{marginBottom: 3}} circular src={activity.host?.image || 'assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted By <Link to={`/profiles/${activity.hostUserName}`}>{activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' />{format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' />{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default ActivityListItem;","import React, { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {observer} from 'mobx-react-lite';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\n\r\nconst ActivityList = () => {\r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => \r\n            <Fragment key={group}>\r\n                <Header sub color='teal'>\r\n                    {group}\r\n                </Header>\r\n                {\r\n                    activities.map(activity => (\r\n                        <ActivityListItem activity={activity} key={activity.id} />\r\n                    ))\r\n                }\r\n            </Fragment>)}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityList);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst ActivityFilters = () => {\r\n    const {activityStore: {prdicate, setPrediate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active={prdicate.has('all')}\r\n                    onClick={() => setPrediate('all', 'true')}\r\n                    />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={prdicate.has('isGoing')}\r\n                    onClick={() => setPrediate('isGoing', 'true')}\r\n                    />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={prdicate.has('isHost')}\r\n                    onClick={() => setPrediate('isHost', 'true')}\r\n                    />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={date => setPrediate('startDate', date as Date)}\r\n                value={prdicate.get('startDate') || new Date()}\r\n                />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityFilters);","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityList from './ActivityList';\r\nimport {observer} from 'mobx-react-lite';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceHolder';\r\n\r\nconst ActivityDashboard = () => {\r\n    const {activityStore} = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(activityRegistry.size <= 1){\r\n            loadActivities();\r\n        }\r\n    }, [activityStore, loadActivities, activityRegistry.size]);\r\n\r\n    \r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder/>\r\n                        <ActivityListItemPlaceholder/>\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination?.currentPage < pagination?.totalPages}\r\n                        initialLoad={false}>\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDashboard);","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n};\r\n\r\nconst MyTextInput = (props: Props) => {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyTextInput;","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst LoginForm = () => {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invaliud email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error'\r\n                        render={() => <Label style={{marginBottom: '10px'}} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button positive content='Login' type='submit' fluid loading={isSubmitting} />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default observer(LoginForm);","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any\r\n};\r\n\r\nconst ValidationErrors = ({errors}: Props) => {\r\n\r\n    return (\r\n        <Message error>\r\n            <Message.List>\r\n                {errors && (\r\n                    errors.map((err: any, i: any) => {\r\n                        return <Message.Item key={i}>{err}</Message.Item>\r\n                    })\r\n                )\r\n                }\r\n            </Message.List>\r\n        </Message>\r\n    );\r\n};\r\n\r\nexport default ValidationErrors;","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nconst RegisterForm = () => {\r\n    const {userStore} = useStore();\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required('The display name is required'),\r\n        username: Yup.string().required('The user name is required'),\r\n        email: Yup.string().required().email(),\r\n        password: Yup.string().required('Date is required')\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='User Name' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error'\r\n                        render={() => \r\n                            <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        positive content='Register' type='submit' fluid loading={isSubmitting} />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default observer(RegisterForm);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport {Container, Header, Segment, Image, Button, Divider} from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nconst HomePage = () => {\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead' >\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='Loago' style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {\r\n                    userStore.isLoggedIn ? (\r\n                        <>\r\n                            <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                            <Button as={Link} to='/activities' size='huge' inverted>\r\n                                Go to activities!\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login!\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register!\r\n                            </Button>\r\n                            <Divider horizontal inverted>Or</Divider>\r\n                            <Button \r\n                                loading={userStore.fbLoading}\r\n                                color='facebook' \r\n                                onClick={userStore.facebookLogin}\r\n                                size='huge' \r\n                                inverted\r\n                                content='Login with Facebook' />\r\n                        </>\r\n                    )\r\n                }\r\n                \r\n                \r\n            </Container>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(HomePage);","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nconst LoadingComponent = ({inverted = true, content = 'Loading...'}: Props) => {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    );\r\n};\r\n\r\nexport default LoadingComponent;","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n};\r\n\r\nconst MyTextArea = (props: Props) => {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyTextArea;","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n};\r\n\r\nconst MySelectInput = (props: Props) => {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MySelectInput;","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n];","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\nconst MyDateInput = (props: Partial<ReactDatePickerProps>) => {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyDateInput;","import React, { useEffect, useState } from 'react';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {observer} from 'mobx-react-lite';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { v4 as uuid  } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nconst ActivityForm = () => {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {createActivity, updateActivity, loadActivity, loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The description title is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n    });\r\n    \r\n    useEffect(() => {\r\n        if(id){\r\n            loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n            \r\n        }\r\n    }, [id, loadActivity]);\r\n\r\n    \r\n\r\n    const handleFormSubmit = (activity: ActivityFormValues) => {        \r\n        if(!activity.id){\r\n            const newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => {history.push(`/activities/${newActivity.id}`);})\r\n        }\r\n        else{\r\n            updateActivity(activity).then(() => {history.push(`/activities/${activity.id}`);});\r\n        }\r\n    };\r\n\r\n    if(loadingInitial){\r\n        return <LoadingComponent content='Load Activity...'/>\r\n    }\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header sub content='Activity Details' color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date' \r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'/>\r\n                        <Header sub content='Location Details' color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive type='submit' \r\n                            content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n            \r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityForm);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore:{updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            {activity.isCancelled && \r\n                <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \r\n                    ribbon color='red' content='Cancelled' />\r\n            }\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong>\r\n                                        <Link to={`/profiles/${activity.host?.username}`}>\r\n                                             {activity.host?.displayName}\r\n                                        </Link>\r\n                                    </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {\r\n                    activity.isHost ? (\r\n                        <>\r\n                            <Button\r\n                                color={activity.isCancelled ? 'green' : 'red'}\r\n                                floated='left'\r\n                                basic\r\n                                content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                                onClick={cancelActivityToggle}\r\n                                loading={loading} />\r\n                            <Button\r\n                                disabled={activity.isCancelled} \r\n                                color='orange' \r\n                                floated='right' \r\n                                as={Link} \r\n                                to={`/manage/${activity.id}`}>\r\n                                Manage Event\r\n                            </Button>\r\n                        </>\r\n                    ) : activity.isGoing ? (\r\n                        <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                    ) : (\r\n                        <Button \r\n                            disabled={activity.isCancelled} \r\n                            loading={loading} \r\n                            onClick={updateAttendance}\r\n                            color='teal'>\r\n                            Join Activity\r\n                        </Button>\r\n                    )\r\n                }                \r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { Field, FieldProps, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if(activityId) {\r\n            commentStore.cretateHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [activityId, commentStore]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n            <Formik\r\n                    onSubmit={(values, {resetForm}) => \r\n                    commentStore.addComment(values).then(() => resetForm())} \r\n                    initialValues={{body: ''}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                    >\r\n                        {({isSubmitting, isValid, handleSubmit}) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{position: 'relative'}}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea \r\n                                                placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if(e.key === 'Enter' && e.shiftKey){\r\n                                                        return;\r\n                                                    }\r\n                                                    if(e.key === 'Enter' && !e.shiftKey){\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                                />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {\r\n                        commentStore.comments.map(comment => (\r\n                            <Comment key={comment.id}>\r\n                                <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                                <Comment.Content>\r\n                                    <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                        {comment.displayName}\r\n                                    </Comment.Author>\r\n                                    <Comment.Metadata>\r\n                                        <div>{`${formatDistanceToNow(comment.createdAt)} ago`}</div>\r\n                                    </Comment.Metadata>\r\n                                    <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                                </Comment.Content>\r\n                            </Comment>\r\n                        ))\r\n                    }\r\n                    \r\n                    \r\n                    \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props{\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\r\n    if(!attendees){\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'}  going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendy => (\r\n                        <Item style={{ position: 'relative' }} key={attendy.username}>\r\n                            {attendy.username === host?.username &&\r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>}\r\n                            <Image size='tiny' src={attendy.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendy.username}`}>{attendy.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendy.following && \r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra> }\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import React, { useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useParams } from 'react-router-dom';\r\nimport {observer} from 'mobx-react-lite';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nconst ActivityDetails = () =>{ \r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if(id){\r\n            loadActivity(id);\r\n        }\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if(loadingInitial || !activity){\r\n      return <LoadingComponent />;  \r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n        );\r\n    };\r\n\r\nexport default observer(ActivityDetails)\r\n","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nconst NotFound = () => {\r\n\r\n    return (<Segment placeholder>\r\n        <Header icon>\r\n            <Icon name='search' />\r\n            Oops - we've looked everywhere and could not find this\r\n        </Header>\r\n        <Segment.Inline>\r\n            <Button as={Link} to='/activities' primary>\r\n                Return to activities page\r\n            </Button>\r\n        </Segment.Inline>\r\n    </Segment>);\r\n};\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ServerError = () => {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header as='h5' content={commonStore.error?.message} color='red' />\r\n            {\r\n                commonStore?.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Strak trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>\r\n                        {commonStore.error.details}\r\n                    </code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default observer(ServerError);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nconst ModalContainer = () => {\r\n    const {modalStore} = useStore()\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini' >\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default observer(ModalContainer);","import { Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../app/common/form/MyTextArea';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    setEditMode: (editMode: boolean) => void\r\n}\r\n\r\nconst ProfileEditForm = ({setEditMode}: Props) => {\r\n    const {profileStore: {updateProfile, profile}} = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: profile?.displayName,\r\n                bio: profile?.bio\r\n            }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={\r\n                Yup.object({\r\n                    displayName: Yup.string().required()\r\n                })\r\n            }>\r\n                {({isSubmitting, isValid, dirty}) => (\r\n                    <Form className='ui form'>\r\n                        <MyTextInput placeholder='Display Name' name='displayName' />\r\n                        <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                        <Button \r\n                            positive\r\n                            type='submit'\r\n                            loading={isSubmitting}\r\n                            content='Update profile'\r\n                            floated='right'\r\n                            disabled={!isValid || !dirty}\r\n                        />\r\n                    </Form>\r\n                )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileEditForm);","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileEditForm from './ProfileEditForm';\r\n\r\nconst ProfileAbout = () => {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {\r\n                        isCurrentUser && (\r\n                            <Button \r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}/>\r\n                        )\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {\r\n                        editMode ? <ProfileEditForm setEditMode={setEditMode} /> : \r\n                        <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileAbout);","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n    useEffect(() => {\r\n            loadUserActivities(profile!.username);\r\n        }, \r\n    [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                        />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                            as={Link}\r\n                            to={`/activities/${activity.id}`}\r\n                            key={activity.id}\r\n                            >\r\n                                <Image\r\n                                src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                style={{ minHeight: 100, objectFit:\r\n                                'cover' }}\r\n                                />\r\n                            <Card.Content>\r\n                                <Card.Header\r\n                                    textAlign='center'>{activity.title}\r\n                                </Card.Header>\r\n                                <Card.Meta textAlign='center'>\r\n                                    <div>\r\n                                    {\r\n                                        format(new Date(activity.date), 'do LLL')\r\n                                    }\r\n                                    </div>\r\n                                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                </Card.Meta>\r\n                            </Card.Content>\r\n                        </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n        );\r\n    });","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\n\r\n\r\nconst ProfileFollowings = () => {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings} = profileStore;\r\n\r\n\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={`People following ${profile?.displayName}`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {\r\n                            followings.map(profile => (\r\n                                <ProfileCard key={profile.username} profile={profile} />\r\n                            ))\r\n                        }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileFollowings);","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props\r\n{\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nconst PhotoWidgetCropper = ({imagePreview, setCropper}: Props) => {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PhotoWidgetCropper;","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropZone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    };\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    };\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, \r\n            {\r\n                preview: URL.createObjectURL(file)\r\n            })))\r\n    }, [setFiles]);\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : {...dzStyles}}>\r\n        <input {...getInputProps()} />\r\n        <Icon name='upload' size='huge' />\r\n        <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropZone from './PhotoWidgetDropZone';\r\n\r\ninterface Props{\r\n    uploadPhoto: (file: Blob) => void;\r\n    loading: boolean;\r\n}\r\n\r\nconst PhotoUploadWidget = ({uploadPhoto, loading}: Props) => {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrope() {\r\n        if(cropper){\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropZone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 3 - Preview and upload' />\r\n                {files && files.length > 0 && \r\n                <>\r\n                    <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrope} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PhotoUploadWidget;","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props{\r\n    profile: Profile\r\n}\r\n\r\nconst ProfilePhotos = ({profile}: Props) => {\r\n    const {profileStore: {isCurrentUser, uploadPhoto, \r\n        uploading, setMainPhoto, loading, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n    const handlePhotoUpload = (file: Blob) => {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    };\r\n    const handleSetMainPhoto = (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) => {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    };\r\n    const handleDeletePhoto = (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) => {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {\r\n                        isCurrentUser && (\r\n                            <Button floated='right' basic \r\n                                content={addPhotoMode ? 'Cancel' : 'Add Photo'} \r\n                                onClick={() => setAddPhotoMode(!addPhotoMode)}/>\r\n                        )\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                        {\r\n                            profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={`main${photo.id}`}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === `main${photo.id}` && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}/>\r\n                                            <Button\r\n                                                basic\r\n                                                name={`delete${photo.id}`}\r\n                                                icon='trash'\r\n                                                color='red'\r\n                                                loading={target === `delete${photo.id}` && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>    \r\n                            ))\r\n                        }\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePhotos);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nconst ProfileContent = ({profile}: Props) => {\r\n    const {profileStore} = useStore();\r\n\r\n    const pains = [\r\n        {\r\n            menuItem: 'About',\r\n            render: () => <ProfileAbout />\r\n        },\r\n        {\r\n            menuItem: 'Photos',\r\n            render: () => <ProfilePhotos profile={profile} />\r\n        },\r\n        {\r\n            menuItem: 'Events',\r\n            render: () => <ProfileActivities/>\r\n        },\r\n        {\r\n            menuItem: 'Followars',\r\n            render: () => <ProfileFollowings />\r\n        },\r\n        {\r\n            menuItem: 'Following',\r\n            render: () => <ProfileFollowings />\r\n        }\r\n    ];\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={pains}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default observer(ProfileContent);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nconst ProfileHeader = ({profile}: Props) => {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Follower' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileHeader);","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nconst ProfilePage = () => {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadProfile, loadingProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        };\r\n    }, [loadProfile, username, setActiveTab]);\r\n\r\n    if(loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile && \r\n                <>\r\n                <ProfileHeader profile={profile} />\r\n                <ProfileContent profile={profile} />\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePage);","import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nexport default function PrivateRout({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    );\r\n}","import React, { Fragment, useEffect } from 'react';\nimport './styles.css';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modal/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if(commonStore.token){\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    }\n    else{\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\n    }\n  }, [commonStore, userStore]);\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <Fragment>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n          <NavBar />\n          <Container style={{marginTop: '7em'}}>\n            <Switch>            \n              <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n              <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n              <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n              <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n              <PrivateRoute path='/errors' component={TestErrors} />\n              <Route path='/server-error' component={ServerError} />\n              <Route component={NotFound} />\n            </Switch>\n          </Container>\n          </>    \n        )}\n      />\n    </Fragment>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n      <Router history={history}>\n        <ScrollToTop />\n        <App />\n      </Router>\n    </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}